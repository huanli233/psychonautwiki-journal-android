/*
 * Copyright (c) 2023. Isaak Hanimann.
 * This file is part of PsychonautWiki Journal.
 *
 * PsychonautWiki Journal is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or (at
 * your option) any later version.
 *
 * PsychonautWiki Journal is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PsychonautWiki Journal.  If not, see https://www.gnu.org/licenses/gpl-3.0.en.html.
 */

package com.isaakhanimann.journal.data.room

import androidx.room.AutoMigration
import androidx.room.Database
import androidx.room.RoomDatabase
import androidx.room.TypeConverters
import androidx.room.migration.Migration
import androidx.sqlite.db.SupportSQLiteDatabase
import com.isaakhanimann.journal.data.room.experiences.ExperienceDao
import com.isaakhanimann.journal.data.room.experiences.entities.CustomSubstance
import com.isaakhanimann.journal.data.room.experiences.entities.CustomUnit
import com.isaakhanimann.journal.data.room.experiences.entities.Experience
import com.isaakhanimann.journal.data.room.experiences.entities.Ingestion
import com.isaakhanimann.journal.data.room.experiences.entities.InstantConverter
import com.isaakhanimann.journal.data.room.experiences.entities.ShulginRating
import com.isaakhanimann.journal.data.room.experiences.entities.SubstanceCompanion
import com.isaakhanimann.journal.data.room.experiences.entities.TimedNote
import com.isaakhanimann.journal.data.room.experiences.entities.CustomRecipe
import com.isaakhanimann.journal.data.room.experiences.entities.RecipeSubcomponent

@TypeConverters(InstantConverter::class, Converters::class)
@Database(
    version = 12,
    entities = [Experience::class, Ingestion::class, SubstanceCompanion::class, CustomSubstance::class, ShulginRating::class, TimedNote::class, CustomUnit::class, CustomRecipe::class, RecipeSubcomponent::class],
    autoMigrations = [
        AutoMigration (from = 1, to = 2),
        AutoMigration (from = 2, to = 3),
        AutoMigration (from = 3, to = 4),
        AutoMigration (from = 4, to = 5),
        AutoMigration (from = 5, to = 6),
        AutoMigration (from = 6, to = 7),
        AutoMigration (from = 7, to = 8),
        // Version 9 is handled by MIGRATION_8_9
        // Version 10 is handled by MIGRATION_9_10
        // Version 11 is handled by MIGRATION_10_11
        // Version 11 is handled by MIGRATION_11_12
    ]
)
abstract class AppDatabase : RoomDatabase() {
    abstract fun experienceDao(): ExperienceDao

    companion object {
        val MIGRATION_7_8 = object : Migration(7, 8) {
            override fun migrate(db: SupportSQLiteDatabase) {
                db.execSQL("ALTER TABLE CustomSubstance ADD COLUMN roaInfos TEXT NOT NULL DEFAULT '[]'")
            }
        }

        val MIGRATION_8_9 = object : Migration(8, 9) {
            override fun migrate(db: SupportSQLiteDatabase) {
                db.execSQL("CREATE TABLE `SubstanceCompanion_new` (`substanceName` TEXT NOT NULL, `color` TEXT, `customColor` INTEGER, PRIMARY KEY(`substanceName`))")
                db.execSQL("INSERT INTO `SubstanceCompanion_new` (substanceName, color, customColor) SELECT substanceName, color, NULL FROM `SubstanceCompanion`")
                db.execSQL("DROP TABLE `SubstanceCompanion`")
                db.execSQL("ALTER TABLE `SubstanceCompanion_new` RENAME TO `SubstanceCompanion`")
            }
        }

        val MIGRATION_9_10 = object : Migration(9, 10) {
            override fun migrate(db: SupportSQLiteDatabase) {
                // The TimedNote table primary key is likely 'id', autogenerated.
                // We recreate the table with the new schema and copy the data.
                db.execSQL("CREATE TABLE `TimedNote_new` (`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `time` INTEGER NOT NULL, `creationDate` INTEGER NOT NULL, `note` TEXT NOT NULL, `color` TEXT, `customColor` INTEGER, `experienceId` INTEGER NOT NULL, `isPartOfTimeline` INTEGER NOT NULL)")
                db.execSQL("INSERT INTO `TimedNote_new` (id, time, creationDate, note, color, customColor, experienceId, isPartOfTimeline) SELECT id, time, creationDate, note, color, NULL, experienceId, isPartOfTimeline FROM `TimedNote`")
                db.execSQL("DROP TABLE `TimedNote`")
                db.execSQL("ALTER TABLE `TimedNote_new` RENAME TO `TimedNote`")
            }
        }

        val MIGRATION_10_11 = object : Migration(10, 11) {
            override fun migrate(db: SupportSQLiteDatabase) {
                // Add customRecipeId column to Ingestion table
                db.execSQL("ALTER TABLE `Ingestion` ADD COLUMN `customRecipeId` INTEGER")
                
                // Create CustomRecipe table
                db.execSQL("CREATE TABLE `CustomRecipe` (`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `name` TEXT NOT NULL, `creationDate` INTEGER NOT NULL, `administrationRoute` TEXT NOT NULL, `isArchived` INTEGER NOT NULL, `unit` TEXT NOT NULL, `unitPlural` TEXT, `note` TEXT NOT NULL)")
                
                // Create RecipeSubcomponent table
                db.execSQL("CREATE TABLE `RecipeSubcomponent` (`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `recipeId` INTEGER NOT NULL, `substanceName` TEXT NOT NULL, `dose` REAL, `estimatedDoseStandardDeviation` REAL, `isEstimate` INTEGER NOT NULL, `originalUnit` TEXT NOT NULL, `creationDate` INTEGER NOT NULL, FOREIGN KEY(`recipeId`) REFERENCES `CustomRecipe`(`id`) ON DELETE CASCADE)")
            }
        }

        val MIGRATION_11_12 = object : Migration(11, 12) {
            override fun migrate(db: SupportSQLiteDatabase) {
                db.execSQL(
                    "ALTER TABLE Ingestion ADD COLUMN recipeGroupId TEXT"
                )
            }
        }

    }
}